<?xml version="1.0" encoding="utf-8"?>
<!--
    Install ANT from http://ant.apache.org/bindownload.cgi
    Basically, unzip it somewhere, and add it to the PATH environment variable

    Once this has run once, you can re-generate the config and re-execute ant
    configuration executables with this...

    ant -DJustConfigure=true -f setup.xml 
    
-->
<project basedir="." name="Download and Setup" default="setup" >

	<!-- Import settings from environment -->
	<property environment="env" />

	<!-- Import settings -->
    <property file="setup.properties"/>

    <!-- Debugging...
	<echoproperties/>
   	-->
    
    <condition property="is.windows">
        <os family="windows" />
    </condition>
    <target name="download.windows" if="is.windows" unless="JustConfigure" >
        <echo>Getting Windows Tools...</echo>
        <mkdir dir="${depends}"/>
        <!-- 
            Download+extract a couple of things at a time, trying to overlap
            downloads and extractions. 

            Note: In Windowsland, all files are 'executable', so ant/JAVA 
            has no problem with permissions.

            Ant's 'progress' option for downloads is useless.  It just fills
            the screen with dots... and then tells you nothing.
            
            So, to see if it's actually downloading or downloafing... 
            
                'Task Manager' or 'Resource Monitor' for Windows
                
                'Activity Monitor' for OS X
                
                'System Monitor' or 'Performance Monitor' or other names, for Linux
		-->
        <parallel threadCount="2">

            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${windows.python.url}"/>
                </get>
                <!-- Launch Python installer -->
                <exec executable="msiexec" searchpath="true"   >
                    <arg line="/I '${basedir}\${depends}\${windows.python.filename}' TARGETDIR='${basedir}\${depends}\${windows.python.unpacked}' /qb" />
                </exec>
                <echo>${windows.python.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>

            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${windows.AIRSDK.url}"/>
                </get>
                <unzip src="${depends}/${windows.AIRSDK.filename}" dest="${depends}/${windows.AIRSDK.unpacked}" />
                <echo>${windows.AIRSDK.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>
            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${cocos2d.url}"/>
                </get>
                <unzip src="${depends}/${cocos2d.filename}" dest="${depends}" />
                <echo>${cocos2d.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>
            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${windows.androidndk.url}"/>
                </get>
                <exec executable="cmd" dir="${depends}" failonerror="true" searchpath="true" >
                    <arg line="/c ${windows.androidndk.filename} -y" />
                </exec>
                <echo>${windows.androidndk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>
            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${windows.androidsdk.url}"/>
                </get>
                <unzip src="${depends}/${windows.androidsdk.filename}" dest="${depends}" />
                <echo>${windows.androidsdk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>

		</parallel>
        
        <echo>Invoke ${configure.bat} to set up build environments.</echo>
    </target>

    <target name="configure.windows" if="is.windows" >
        <sequential>
            <echo>Exporting Windows Environment...</echo>

<echo file="${configure.bat}" append="false">@echo off
REM Set up build environment.
set ANT_ROOT=${ant.home}\bin
REM set Path=%ANT_ROOT%;%Path%
set AIR_ROOT=${basedir}\${depends}\${windows.AIRSDK.unpacked}
set Path=%AIR_ROOT%\bin;%Path%
set COCOS_CONSOLE_ROOT=${basedir}\${depends}\${cocos2d.unpacked}\tools\cocos2d-console\bin
set Path=%COCOS_CONSOLE_ROOT%;%Path%
set COCOS_FRAMEWORKS=${basedir}\${depends}\${cocos2d.unpacked}\frameworks
set Path=%COCOS_FRAMEWORKS%;%Path%
set ANDROID_SDK_ROOT=${basedir}\${depends}\${windows.androidsdk.unpacked}
set Path=%ANDROID_SDK_ROOT%/tools;%ANDROID_SDK_ROOT%/platform-tools;%Path%
set NDK_ROOT=${basedir}\${depends}\${windows.androidndk.unpacked}
set PYTHON_PATH=${basedir}\${depends}\${windows.python.unpacked}
set Path=%PYTHON_PATH%;%Path%

</echo>
<path id="ant.home.DOS">
    <pathelement path="${ant.home}" />
</path>
<pathconvert targetos="unix" property="ant.home.unix" refid="ant.home.DOS"/>
<path id="basedir.depends">
    <pathelement path="${basedir}/depends" />
</path>
<pathconvert targetos="unix" property="basedir.depends.unix" refid="basedir.depends"/>

<property name="basedir.depends" location="${depends}" relative="false" />
<echo file="${configure.properties}" append="false">
# Ant configuration properties for Cocos2d-js
ANT_ROOT=${ant.home.unix}/bin

PYTHON_ROOT=${basedir.depends.unix}/${windows.python.unpacked}

COCOS_CONSOLE_ROOT=${basedir.depends.unix}/${cocos2d.unpacked}/tools/cocos2d-console/bin

COCOS_FRAMEWORKS=${basedir.depends.unix}/${cocos2d.unpacked}/frameworks

NDK_ROOT=${basedir.depends.unix}/${windows.androidndk.unpacked}
ANDROID_SDK_ROOT=${basedir.depends.unix}/${windows.androidsdk.unpacked}
android.android=${ANDROID_SDK_ROOT}/SDK Manager.exe
android.avd=${ANDROID_SDK_ROOT}/AVD Manager.exe
android.emulator=${ANDROID_SDK_ROOT}/tools/emulator
android.adb=${ANDROID_SDK_ROOT}/platform-tools/adb
android.monitor=${ANDROID_SDK_ROOT}/platform-tools/monitor

# Ant configuration properties for Adobe AIR
SHELL=cmd
SHELL.c=/c
AIR_ROOT=${basedir.depends.unix}/${windows.AIRSDK.unpacked}
AIR.MXMLC=${AIR_ROOT}/bin/mxmlc.bat
AIR.COMPC=${AIR_ROOT}/bin/acompc.bat
AIR.ADT=${AIR_ROOT}/bin/adt.bat
AIR.ADL=${AIR_ROOT}/bin/adl.bat
AIR.ASDOC=${AIR_ROOT}/bin/asdoc.bat
GNU.TAIL=tail

</echo>
			
            <!-- Launch android manager, to download more -->
            <echo>Finish configuring Android SDK.</echo>
			<exec executable="cmd" dir="${basedir}/${depends}/${windows.androidsdk.unpacked}/tools" spawn="true" >
				<arg line="/c android.bat" />
			</exec>
			<exec executable="${basedir}/${depends}/${windows.androidsdk.unpacked}/AVD Manager.exe" spawn="true" />
        </sequential>
    </target>
    
    <condition property="is.osx">
        <and>
            <os family="mac"/>
            <os family="unix"/>
        </and>
    </condition>
    <target name="download.osx" if="is.osx" unless="JustConfigure" >
        <echo>Getting OS X Tools...</echo>
        <mkdir dir="${depends}"/>

        <!-- 
            Download+extract a couple of things at a time, trying to overlap
            downloads and extractions. 

            Note: GNU unzip/tar are shell versions, because JAVA won't set 
            permissions.  We can expect these tools in a UNIX shell.
        -->

        <parallel threadCount="2">
        
            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${osx.AIRSDK.url}"/>
                </get>
                <mkdir dir="${depends}/${osx.AIRSDK.unpacked}"/>
                <exec executable="tar" failonerror="true" >
                    <arg line="jxf '${depends}/${osx.AIRSDK.filename}' -C '${depends}/${osx.AIRSDK.unpacked}'" />
                </exec>
                <echo>${osx.AIRSDK.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>
            
            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${cocos2d.url}"/>
                </get>
                <exec executable="unzip" failonerror="true"  >
                    <arg line="-o -d '${depends}' '${depends}/${cocos2d.filename}'" />
                </exec>
                <echo>${cocos2d.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>

            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${osx.androidndk.url}"/>
                </get>
                <exec executable="sh" dir="${depends}" failonerror="true" searchpath="true" >
                    <arg line="-c 'chmod +x ${osx.androidndk.filename}'" />
                </exec>
                <exec executable="sh" dir="${depends}" failonerror="true" searchpath="true" >
                    <arg line="-c './${osx.androidndk.filename} -y'" />
                </exec>
                <echo>${osx.androidndk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>
            
            <sequential>
                <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                    <url url="${osx.androidsdk.url}"/>
                </get>
                <exec executable="unzip" failonerror="true" >
                    <arg line="-o -d '${depends}' '${depends}/${osx.androidsdk.filename}'" />
                </exec>
                <echo>${osx.androidsdk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
            </sequential>

        </parallel>

<echo>Invoke 'source configure.sh' to set up build environments, or add configure.sh
to your ~/.bash_profile
</echo>
            
    </target>

    <target name="configure.osx" if="is.osx" >
        <sequential>
            <echo>Exporting OS X Environment...</echo>
            <!-- Ask nicely for which ant -->
            <exec executable="sh" outputproperty='ANT_FILE' failonerror="true"  >
                <arg line="-c 'which ant'" />
            </exec>
            <dirname file="${ANT_FILE}" property="ANT_ROOT" />
<echo file="${configure.sh}" append="false">#!/bin/sh
# Set up build environment.
export ANT_ROOT=${ANT_ROOT}
#export PATH=$ANT_ROOT/bin:$PATH
export AIR_ROOT=${basedir}/${depends}/${osx.AIRSDK.unpacked}
export PATH=$AIR_ROOT/bin:$PATH
export COCOS_CONSOLE_ROOT=${basedir}/${depends}/${cocos2d.unpacked}/tools/cocos2d-console/bin
export PATH=$COCOS_CONSOLE_ROOT:$PATH
export COCOS_FRAMEWORKS=${basedir}/${depends}/${cocos2d.unpacked}/frameworks
export PATH=$COCOS_FRAMEWORKS:$PATH
export ANDROID_SDK_ROOT=${basedir}/${depends}/${osx.androidsdk.unpacked}
export PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH
export NDK_ROOT=${basedir}/${depends}/${osx.androidndk.unpacked}
</echo>
<exec executable="sh" failonerror="true" searchPATH="true" >
    <arg line="-c 'chmod +x ${configure.sh}'" />
</exec>
<echo file="${configure.properties}" append="false">
# Ant configuration properties for Cocos2d-js
ANT_ROOT=${ANT_ROOT}
PYTHON_ROOT=

COCOS_CONSOLE_ROOT=${basedir}/${depends}/${cocos2d.unpacked}/tools/cocos2d-console/bin
COCOS_FRAMEWORKS=${basedir}/${depends}/${cocos2d.unpacked}/frameworks

NDK_ROOT=${basedir}/${depends}/${osx.androidndk.unpacked}
ANDROID_SDK_ROOT=${basedir}/${depends}/${osx.androidsdk.unpacked}
android.android=${ANDROID_SDK_ROOT}/tools/android
android.emulator=${ANDROID_SDK_ROOT}/tools/emulator
android.adb=${ANDROID_SDK_ROOT}/platform-tools/adb
android.monitor=${ANDROID_SDK_ROOT}/platform-tools/monitor

# Ant configuration properties for Adobe AIR
SHELL=sh
SHELL.c=-c
AIR_ROOT=${basedir}/${depends}/${osx.AIRSDK.unpacked}
AIR.MXMLC=${AIR_ROOT}/bin/mxmlc
AIR.COMPC=${AIR_ROOT}/bin/acompc
AIR.ADT=${AIR_ROOT}/bin/adt
AIR.ADL=${AIR_ROOT}/bin/adl
AIR.ASDOC=${AIR_ROOT}/bin/asdoc
GNU.TAIL=tail
</echo>
	           
            <!-- Launch android manager, to download more -->
            <echo>Finish configuring Android SDK.</echo>
            <exec executable="${basedir}/${depends}/${osx.androidsdk.unpacked}/tools/android" spawn="true" />
            <exec executable="${basedir}/${depends}/${osx.androidsdk.unpacked}/tools/android" spawn="true">
                <arg line="avd" />
            </exec>

        </sequential>
    </target>
    
    <condition property="is.linux">
        <and>
            <os family="unix"/>
            <not><os family="mac"/></not>
        </and>
    </condition>
    <target name="download.linux" if="is.linux" unless="JustConfigure" >
        <echo>Getting Linux/Unix Tools...</echo>
        <mkdir dir="${depends}"/>

        <!-- 
            Download+extract a couple of things at a time, trying to overlap
            downloads and extractions. 

            Note: GNU unzip/tar are shell versions, because JAVA won't set 
            permissions.  We can expect these tools in a UNIX shell.
        -->
       
        <parallel threadCount="2">
        <sequential>
            
            <get dest="${depends}" skipexisting="true" ignoreerrors="false" >
                <url url="${linux.androidsdk.url}"/>
            </get>
            <exec executable="tar" failonerror="true" >
                <arg line="zxf '${depends}/${linux.androidsdk.filename}' -C '${depends}'" />
            </exec>
            <echo>${linux.androidsdk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>

        </sequential>
        <sequential>
        
            <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                <url url="${cocos2d.url}"/>
            </get>

            <exec executable="unzip" failonerror="true"  >
                <arg line="-o -d '${depends}' '${depends}/${cocos2d.filename}'" />
            </exec>

            <echo>${cocos2d.filename} extracted.  If you're stuck, a download is probably still going on.</echo>

        </sequential>
        <sequential>
            
            <get dest="${depends}" skipexisting="true" ignoreerrors="false" >
                <url url="${linux.androidndk.url}"/>
            </get>
            <!-- Evil, self-extracting executable for ndk -->
            <exec executable="sh" dir="${depends}" failonerror="true"  >
                <arg line="-c 'chmod +x ${linux.androidndk.filename}'" />
            </exec>
            <exec executable="sh" dir="${depends}" failonerror="true"  >
                <arg line="-c './${linux.androidndk.filename} -y'" />
            </exec>
            <echo>${linux.androidndk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>

        </sequential>

        </parallel>


<echo>Invoke 'source configure.sh' to set up build environments, or add configure.sh
to your ~/.bash_profile
</echo>
    </target>

    <target name="configure.linux" if="is.linux" >
        
        <sequential>
            <echo>Exporting Linux Environment...</echo>
            <!-- Ask nicely for which ant -->
            <exec executable="sh" outputproperty='ANT_FILE' failonerror="true"  >
                <arg line="-c 'which ant'" />
            </exec>
            <dirname file="${ANT_FILE}" property="ANT_ROOT" />
<echo file="${configure.sh}" append="false">#!/bin/sh
# Set up build environment.
export ANT_ROOT=${ANT_ROOT}
#export PATH=$ANT_ROOT/bin:$PATH
export COCOS_CONSOLE_ROOT=${basedir}/${depends}/${cocos2d.unpacked}/tools/cocos2d-console/bin
export PATH=$COCOS_CONSOLE_ROOT:$PATH
export COCOS_FRAMEWORKS=${basedir}/${depends}/${cocos2d.unpacked}/frameworks
export PATH=$COCOS_FRAMEWORKS:$PATH
export NDK_ROOT=${basedir}/${depends}/${linux.androidndk.unpacked}
export ANDROID_SDK_ROOT=${basedir}/${depends}/${linux.androidsdk.unpacked}

</echo>
<exec executable="sh" failonerror="true" searchPATH="true" >
    <arg line="-c 'chmod +x ${configure.sh}'" />
</exec>
<echo file="${configure.properties}" append="false">
# Ant properties
SHELL=sh
SHELL.c=-c
ANT_ROOT=${ANT_ROOT}
PYTHON_ROOT=

COCOS_CONSOLE_ROOT=${basedir}/${depends}/${cocos2d.unpacked}/tools/cocos2d-console/bin
COCOS_FRAMEWORKS=${basedir}/${depends}/${cocos2d.unpacked}/frameworks

NDK_ROOT=${basedir}/${depends}/${linux.androidndk.unpacked}
ANDROID_SDK_ROOT=${basedir}/${depends}/${linux.androidsdk.unpacked}
android.android=${ANDROID_SDK_ROOT}/tools/android
android.emulator=${ANDROID_SDK_ROOT}/tools/emulator
android.adb=${ANDROID_SDK_ROOT}/platform-tools/adb
android.monitor=${ANDROID_SDK_ROOT}/platform-tools/monitor
</echo>

   
    <!-- Install some more build necessities with apt-get.  Needs root -->
    <exec executable="sh" dir="${depends}/${cocos2d.unpacked}/build" failonerror="true"  >
        <arg line="-c 'sudo ./install-deps-linux.sh'" />
    </exec>
    <!--
    <exec executable="sh" dir="${depends}/${cocos2d.unpacked}/tools/travis-scripts" failonerror="true"  >
        <arg line="-c './install-glfw.sh'" />
    </exec>
    -->

    <!-- Launch android manager, to download more -->
    <echo>Finish configuring Android SDK.</echo>
    <exec executable="${basedir}/${depends}/${linux.androidsdk.unpacked}/tools/android" spawn="true" />
    <exec executable="${basedir}/${depends}/${linux.androidsdk.unpacked}/tools/android" spawn="true">
        <arg line="avd" />
    </exec>

    </sequential>
    </target>
    
    <!--
        Setup: 
            Depends: Check OS types and invoke the one that matches
    -->
    <target name="setup" description="Download Based On OS" depends="download.windows,download.osx,download.linux,configure.windows,configure.osx,configure.linux" >
   
    </target>    
</project>
