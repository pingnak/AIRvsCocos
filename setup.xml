<?xml version="1.0" encoding="utf-8"?>
<!--
    Install ANT from http://ant.apache.org/bindownload.cgi
    Basically, unzip it somewhere, and add it to the PATH environment variable
-->
<project basedir="." name="Download and Setup" default="setup" >

	<!-- Import settings from environment -->
	<property environment="env" />

	<!-- Import settings -->
    <property file="setup.properties"/>

    <!--
        ant -DJustConfigure=true -f setup.xml 

        Just generate configure.*, without downloading/extracting anything.
        
        It'll also launch android and avd manager
    -->
    <property name="JustConfigure" value="false" />

    <!-- Debugging...
	<echoproperties/>
   	-->
    
    <condition property="is.windows">
        <os family="windows" />
    </condition>
    <target name="download.windows" if="is.windows" unless="JustConfigure" >
        <sequential>
            <echo>Getting Windows Tools...</echo>
			<mkdir dir="${depends}"/>
            <!-- 
                Download+extract a couple of things at a time, trying to overlap
                downloads and extractions. 

                Note: In Windowsland, all files are 'executable', so ant/JAVA 
                has no problem with permissions.
            -->
            <parallel threadCount="2">
				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${windows.python.url}"/>
					</get>
					<!-- Launch interactive Python installer -->
					<exec executable="msiexec" dir="${depends}" spawn="true" searchpath="true" >
						<arg line="/I ${windows.python.filename}" />
					</exec>
                    <echo>${windows.python.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>
				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${windows.AIRSDK.url}"/>
					</get>
					<unzip src="${depends}/${windows.AIRSDK.filename}" dest="${depends}/${windows.AIRSDK.unpacked}" />
                    <echo>${windows.AIRSDK.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>
				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${windows.cocos2d.url}"/>
					</get>
					<unzip src="${depends}/${windows.cocos2d.filename}" dest="${depends}" />
                    <echo>${windows.cocos2d.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>
				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${windows.androidndk.url}"/>
					</get>
					<!-- Evil, self-extracting executable for ndk -->
					<exec executable="cmd" dir="${depends}" failonerror="true" searchpath="true" >
						<arg line="/c ${windows.androidndk.filename} -y" />
					</exec>
                    <echo>${windows.androidndk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>
				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${windows.androidsdk.url}"/>
					</get>
					<unzip src="${depends}/${windows.androidsdk.filename}" dest="${depends}" />
                    <echo>${windows.androidsdk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>
            </parallel>
            
            <echo>Invoke ${configure.bat} to set up build environments.</echo>
        </sequential>
    </target>

    <target name="configure.windows" if="is.windows" >
        <sequential>
            <echo>Exporting Windows Environment...</echo>
<echo file="${configure.bat}" append="false">@echo off
REM Set up build environment.
set ANT_ROOT=${ant.home}
REM set Path=%ANT_ROOT%\bin;%Path%
set AIR_ROOT=${basedir}\${depends}\${cwindows.AIRSDK.unpacked}
set Path=%AIR_ROOT%\bin;%Path%
set COCOS_CONSOLE_ROOT=${basedir}\${depends}\${windows.cocos2d.unpacked}\tools\cocos2d-console\bin
set Path=%COCOS_CONSOLE_ROOT%;%Path%
set COCOS_FRAMEWORKS=${basedir}\${depends}\${windows.cocos2d.unpacked}\frameworks
set Path=%COCOS_FRAMEWORKS%;%Path%
set ANDROID_SDK_ROOT=${basedir}\${depends}\${windows.androidsdk.unpacked}
set Path=%ANDROID_SDK_ROOT%/tools;%ANDROID_SDK_ROOT%/platform-tools;%Path%
set NDK_ROOT=${basedir}\${depends}\${windows.androidndk.unpacked}
</echo>
<echo file="${configure.properties}" append="false">#!/bin/sh
# Ant configuration properties for Cocos2d-js
ANT_ROOT=${ant.home}
AIR_ROOT=${basedir}/${depends}/${cwindows.AIRSDK.unpacked}
COCOS_CONSOLE_ROOT=${basedir}/${depends}/${windows.cocos2d.unpacked}/tools/cocos2d-console/bin
COCOS_FRAMEWORKS=${basedir}/${depends}/${windows.cocos2d.unpacked}/frameworks

NDK_ROOT=${basedir}/${depends}/${windows.androidndk.unpacked}
ANDROID_SDK_ROOT=${basedir}/${depends}/${windows.androidsdk.unpacked}
android.android=${ANDROID_SDK_ROOT}/SDK Manager.exe
android.avd=${ANDROID_SDK_ROOT}/AVD Manager.exe
android.emulator=${ANDROID_SDK_ROOT}/tools/emulator
android.adb=${ANDROID_SDK_ROOT}/platform-tools/adb
android.monitor=${ANDROID_SDK_ROOT}/platform-tools/monitor

# Ant configuration properties for Adobe AIR
SHELL=cmd
SHELL.c=/c
AIR_ROOT=${basedir}/${depends}/${windows.AIRSDK.unpacked}
AIR.MXMLC=${AIR_ROOT}/bin/mxmlc.bat
AIR.ADT=${AIR_ROOT}/bin/adt.bat
AIR.ADL=${AIR_ROOT}/bin/adl.bat
AIR.ASDOC=${AIR_ROOT}/bin/asdoc.bat
GNU.TAIL=tail

</echo>
			
            <!-- Launch android manager, to download more -->
            <echo>Finish configuring Android SDK.</echo>
            <exec executable="${basedir}/${depends}/${windows.androidsdk.unpacked}/SDK Manager.exe" searchpath="true" spawn="true" />
            <exec executable="${basedir}/${depends}/${windows.androidsdk.unpacked}/AVD Manager.exe" searchpath="true" spawn="true" />
        </sequential>
    </target>
    
    <condition property="is.osx">
        <and>
            <os family="mac"/>
            <os family="unix"/>
        </and>
    </condition>
    <target name="download.osx" if="is.osx" unless="JustConfigure" >
        <sequential>
            <echo>Getting OS X Tools...</echo>
			<mkdir dir="${depends}"/>

            <!-- 
                Download+extract a couple of things at a time, trying to overlap
                downloads and extractions. 

                Note: GNU unzip/tar are shell versions, because JAVA won't set 
                permissions.  We can expect these tools in a UNIX shell.
            -->

            <parallel threadCount="2">

				<sequential>
                    <get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
                        <url url="${osx.AIRSDK.url}"/>
                    </get>
                    <mkdir dir="${depends}/${osx.AIRSDK.unpacked}"/>
                    <exec executable="tar" failonerror="true" >
                        <arg line="jxf '${depends}/${osx.AIRSDK.filename}' -C '${depends}/${osx.AIRSDK.unpacked}'" />
                    </exec>
                    <echo>${osx.AIRSDK.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>
				
				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${osx.cocos2d.url}"/>
					</get>
                    <exec executable="unzip" failonerror="true"  >
                        <arg line="-o -d '${depends}' '${depends}/${osx.cocos2d.filename}'" />
                    </exec>
                    <echo>${osx.cocos2d.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>

				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${osx.androidndk.url}"/>
					</get>
					<exec executable="sh" dir="${depends}" failonerror="true" searchpath="true" >
						<arg line="-c 'chmod +x ${osx.androidndk.filename}'" />
					</exec>
					<exec executable="sh" dir="${depends}" failonerror="true" searchpath="true" >
						<arg line="-c './${osx.androidndk.filename} -y'" />
					</exec>
                    <echo>${osx.androidndk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>
				
				<sequential>
					<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
						<url url="${osx.androidsdk.url}"/>
					</get>
                    <exec executable="unzip" failonerror="true" >
                        <arg line="-o -d '${depends}' '${depends}/${osx.androidsdk.filename}'" />
                    </exec>
                    <echo>${osx.androidsdk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>
				</sequential>

            </parallel>

<echo>Invoke 'source configure.sh' to set up build environments, or add configure.sh
to your ~/.bash_profile
</echo>
            
        </sequential>
    </target>

    <target name="configure.osx" if="is.osx" >
        <sequential>
            <echo>Exporting OS X Environment...</echo>
            <!-- Ask nicely for which ant -->
            <exec executable="sh" outputproperty='ANT_FILE' failonerror="true"  >
                <arg line="-c 'which ant'" />
            </exec>
            <dirname file="${ANT_FILE}" property="ANT_ROOT" />
<echo file="${configure.sh}" append="false">#!/bin/sh
# Set up build environment.
export ANT_ROOT=${ANT_ROOT}
#export PATH=$ANT_ROOT/bin:$PATH
export AIR_ROOT=${basedir}/${depends}/${osx.AIRSDK.unpacked}
export PATH=$AIR_ROOT/bin:$PATH
export COCOS_CONSOLE_ROOT=${basedir}/${depends}/${osx.cocos2d.unpacked}/tools/cocos2d-console/bin
export PATH=$COCOS_CONSOLE_ROOT:$PATH
export COCOS_FRAMEWORKS=${basedir}/${depends}/${osx.cocos2d.unpacked}/frameworks
export PATH=$COCOS_FRAMEWORKS:$PATH
export ANDROID_SDK_ROOT=${basedir}/${depends}/${osx.androidsdk.unpacked}
export PATH=$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH
export NDK_ROOT=${basedir}/${depends}/${osx.androidndk.unpacked}
</echo>
<exec executable="sh" failonerror="true" searchPATH="true" >
    <arg line="-c 'chmod +x ${configure.sh}'" />
</exec>
<echo file="${configure.properties}" append="false">#!/bin/sh
# Ant configuration properties for Cocos2d-js
ANT_ROOT=${ANT_ROOT}
COCOS_CONSOLE_ROOT=${basedir}/${depends}/${osx.cocos2d.unpacked}/tools/cocos2d-console/bin
COCOS_FRAMEWORKS=${basedir}/${depends}/${osx.cocos2d.unpacked}/frameworks

NDK_ROOT=${basedir}/${depends}/${osx.androidndk.unpacked}
ANDROID_SDK_ROOT=${basedir}/${depends}/${osx.androidsdk.unpacked}
android.android=${ANDROID_SDK_ROOT}/tools/android
android.emulator=${ANDROID_SDK_ROOT}/tools/emulator
android.adb=${ANDROID_SDK_ROOT}/platform-tools/adb
android.monitor=${ANDROID_SDK_ROOT}/platform-tools/monitor

# Ant configuration properties for Adobe AIR
SHELL=sh
SHELL.c=-c
AIR_ROOT=${basedir}/${depends}/${osx.AIRSDK.unpacked}
AIR.MXMLC=${AIR_ROOT}/bin/mxmlc
AIR.ADT=${AIR_ROOT}/bin/adt
AIR.ADL=${AIR_ROOT}/bin/adl
AIR.ASDOC=${AIR_ROOT}/bin/asdoc
GNU.TAIL=tail
</echo>
	           
            <!-- Launch android manager, to download more -->
            <echo>Finish configuring Android SDK.</echo>
            <exec executable="${basedir}/${depends}/${osx.androidsdk.unpacked}/tools/android" spawn="true" />
            <exec executable="${basedir}/${depends}/${osx.androidsdk.unpacked}/tools/android" spawn="true">
                <arg line="avd" />
            </exec>

        </sequential>
    </target>
    
    <condition property="is.linux">
        <and>
            <os family="unix"/>
            <not><os family="mac"/></not>
        </and>
    </condition>
    <target name="download.linux" if="is.linux" unless="JustConfigure" >
        <sequential>
            <echo>Getting Linux/Unix Tools...</echo>
			<mkdir dir="${depends}"/>

            <!-- 
                Download+extract a couple of things at a time, trying to overlap
                downloads and extractions. 

                Note: GNU unzip/tar are shell versions, because JAVA won't set 
                permissions.  We can expect these tools in a UNIX shell.
            -->
           
            <parallel threadCount="2">
			<sequential>
				
				<get dest="${depends}" skipexisting="true" ignoreerrors="false" >
					<url url="${linux.androidsdk.url}"/>
				</get>
				<exec executable="tar" failonerror="true" >
					<arg line="zxf '${depends}/${linux.androidsdk.filename}' -C '${depends}'" />
				</exec>
				<echo>${linux.androidsdk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>

			</sequential>
			<sequential>
			
				<get dest="${depends}" skipexisting="true" ignoreerrors="false"  >
					<url url="${linux.cocos2d.url}"/>
				</get>

				<exec executable="unzip" failonerror="true"  >
					<arg line="-o -d '${depends}' '${depends}/${linux.cocos2d.filename}'" />
				</exec>

				<echo>${linux.cocos2d.filename} extracted.  If you're stuck, a download is probably still going on.</echo>

			</sequential>
			<sequential>
				
				<get dest="${depends}" skipexisting="true" ignoreerrors="false" >
					<url url="${linux.androidndk.url}"/>
				</get>
				<!-- Evil, self-extracting executable for ndk -->
				<exec executable="sh" dir="${depends}" failonerror="true"  >
					<arg line="-c 'chmod +x ${linux.androidndk.filename}'" />
				</exec>
				<exec executable="sh" dir="${depends}" failonerror="true"  >
					<arg line="-c './${linux.androidndk.filename} -y'" />
				</exec>
				<echo>${linux.androidndk.filename} extracted.  If you're stuck, a download is probably still going on.</echo>

			</sequential>
            </parallel>


<echo>Invoke 'source configure.sh' to set up build environments, or add configure.sh
to your ~/.bash_profile
</echo>
        </sequential>
    </target>

    <target name="configure.linux" if="is.linux" >
        
        <sequential>
            <echo>Exporting Linux Environment...</echo>
            <!-- Ask nicely for which ant -->
            <exec executable="sh" outputproperty='ANT_FILE' failonerror="true"  >
                <arg line="-c 'which ant'" />
            </exec>
            <dirname file="${ANT_FILE}" property="ANT_ROOT" />
<echo file="${configure.sh}" append="false">#!/bin/sh
# Set up build environment.
export ANT_ROOT=${ANT_ROOT}
#export PATH=$ANT_ROOT/bin:$PATH
export COCOS_CONSOLE_ROOT=${basedir}/${depends}/${linux.cocos2d.unpacked}/tools/cocos2d-console/bin
export PATH=$COCOS_CONSOLE_ROOT:$PATH
export COCOS_FRAMEWORKS=${basedir}/${depends}/${linux.cocos2d.unpacked}/frameworks
export PATH=$COCOS_FRAMEWORKS:$PATH
export NDK_ROOT=${basedir}/${depends}/${linux.androidndk.unpacked}
export ANDROID_SDK_ROOT=${basedir}/${depends}/${linux.androidsdk.unpacked}

</echo>
<exec executable="sh" failonerror="true" searchPATH="true" >
    <arg line="-c 'chmod +x ${configure.sh}'" />
</exec>
<echo file="${configure.properties}" append="false">#!/bin/sh
# Ant properties
SHELL=sh
SHELL.c=-c
ANT_ROOT=${ANT_ROOT}
COCOS_CONSOLE_ROOT=${basedir}/${depends}/${linux.cocos2d.unpacked}/tools/cocos2d-console/bin
COCOS_FRAMEWORKS=${basedir}/${depends}/${linux.cocos2d.unpacked}/frameworks

NDK_ROOT=${basedir}/${depends}/${linux.androidndk.unpacked}
ANDROID_SDK_ROOT=${basedir}/${depends}/${linux.androidsdk.unpacked}
android.android=${ANDROID_SDK_ROOT}/tools/android
android.emulator=${ANDROID_SDK_ROOT}/tools/emulator
android.adb=${ANDROID_SDK_ROOT}/platform-tools/adb
android.monitor=${ANDROID_SDK_ROOT}/platform-tools/monitor

<!-- Launch android manager, to download more -->
<echo>Finish configuring Android SDK.</echo>
<exec executable="${basedir}/${depends}/${linux.androidsdk.unpacked}/tools/android" spawn="true" />
<exec executable="${basedir}/${depends}/${osx.androidsdk.unpacked}/tools/android" spawn="true">
    <arg line="avd" />
</exec>

</echo>
        </sequential>
    </target>
    
    <!--
        Setup: 
            Depends: Check OS types and invoke the one that matches
    -->
    <target name="setup" description="Download Based On OS" depends="download.windows,download.osx,download.linux,configure.windows,configure.osx,configure.linux" >
   
    </target>    
</project>
