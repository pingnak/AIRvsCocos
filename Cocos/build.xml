<?xml version="1.0" encoding="utf-8"?>
<!--
    A build script wrapping cocos?  Am I insane?  Yes... but that's not the point.
    
    The point is, where I observed behavior where Cocos2D-js *removed* the 
    contents of its src folder.  I don't like that.
    
    Also, keeping the res imports in resource.js straight, by hand, and editing 
    the project.json by hand, to keep adding source code was tedious.

    On top of that, I'd rather like to have the option to add/remove a few 'macro'
    definitions, to improvise some regular expression style code alterations, to
    add/remove code and defintions to/from different build flavors.  That's 
    almost certainly buried in cocos, somewhere, but the simplified interface
    hides it from me, and I don't want to go digging into the bottomless rabbit
    hole, modifying things, when I just want to write a game.
-->
<project basedir="." name="${targetname}" default="web" >

    <!-- 
        This allow you to override certain, private settings with your own folder  
        in ~/ant/build.properties.  Like passwords and device IDs.
    -->
	<property file="${user.home}/ant/build.properties"/>

	<!-- Import settings from environment -->
	<property environment="env" />

	<!-- Get paths from 'ant -f setup.xml' -->
    <property file="../configure.properties"/>
	
	<!-- Import build.properties, for project -->
	<property file="build.properties"/>

    <!-- Debugging...    
	<echoproperties/>
	-->

    <!-- Invoke cocos in various prescribed manners -->
	<macrodef name="macro-cocos">
		<attribute name="command"/>		<!-- Command line for cocos -->
		<attribute name="dirname" default="${targetname}"/>
		<sequential>
			<tstamp />
            
            <!--
                Invoke cocos
                
                -p win32, web, mac, wp8, metro, linux, android, ios

            -->
			<exec executable="${SHELL}" dir="@{dirname}" failonerror="true" searchpath="true" >
			    <env key="ANT_ROOT" value="${ANT_ROOT}" />
			    <env key="COCOS_CONSOLE_ROOT" value="${COCOS_CONSOLE_ROOT}" />
			    <env key="COCOS_FRAMEWORKS" value="${COCOS_FRAMEWORKS}" />
			    <env key="ANDROID_SDK_ROOT" value="${ANDROID_SDK_ROOT}" />
			    <env key="NDK_ROOT" value="${NDK_ROOT}" />
			    <env key="PATH" value="${ANDROID_SDK_ROOT}:${COCOS_FRAMEWORKS}:${COCOS_CONSOLE_ROOT}:${env.PATH}"/>

                <arg line="${SHELL.c} 'cocos @{command}'" /> 

			    <!-- Filter stderr, to point back at original source paths... -->
				<redirector>
					<errorfilterchain>
						<replaceregex 
							pattern="@{dirname}/src[/\\]" 
							replace="src/" />
					</errorfilterchain>
				</redirector>			    
            </exec>
        </sequential>
	</macrodef>

	<macrodef name="macro-transfer">
		<attribute name="debug"/>		<!-- Debug flag -->
		<attribute name="release"/>		<!-- Complimentary Release flag -->
		<!-- etc. -->

	    <sequential>

            <!-- Regular expressions used to parse macro-like insertions -->
            <property name="rxFunc" value="(^|[\t ]+)" />
            <property name="rxConst" value="=(^|[\t (]+)" />
            <property name="rxEatArgs" value="[ \t]*(\([^)]*\);)" />
            <property name="rxArg" value="[ \t]*\([\t ]*(.*)[\t ]*\);" />
            <property name="rxFirstArg" value="[ \t]*\(([^,]*)," />
            <property name="rxGetArg" value=",([^,]*)," />
            <property name="rxLastArg" value=",([^)]*)\)" />
            <!-- Transfer+translate source code, given those attributes -->
            <copy todir="${targetname}/src" >
                <fileset dir="src">
                    <include name="**/*.js" />
                </fileset>
                <filterchain>
                <!-- Example filters
					<replaceregex flags="g"
						pattern="${rxFunc}trace${rxArg}"
						replace="\1{ cc.trace(\2); }"/>                
					<replaceregex flags="g"
						pattern="${rxFunc}trace${rxArg}"
						replace="\1 /*trace(\2);*/"/>                
                -->
				</filterchain> 
            </copy>

            <copy todir="${targetname}/res" >
                <fileset dir="res">
                    <!-- I was going to be picky, but the list got longer and longer... -->
                    <include name="**/*" />
                </fileset>
            </copy>            

	    </sequential>
    
	</macrodef>
	
	<!--
	    Caution: This will be destructive to any existing changes that you were
	    forced to make in XCode
	
	-->
    <target name="init" description="Create Cocos2D-js Project" >
        <echo>Initializing Project with Cocos</echo>

        <!-- Have git ignore most of this stuff. -->
<echo file=".gitignore" append="false">#Cocos2d-js boilerplate
# Foresake all of Cocos2d's project tree from version control.
# We can just rebuild it, so it's tens of thousands of files of boilerplatr and  
# intermediate files with a few minor tweaks scattered among them.
${targetname}
</echo>

        <!-- Have cocos make the project -->
		<macro-cocos dirname="." command="new ${targetname} --package ${app.id} --language js" />

        <!-- 
            Big, bad iOS BUG in cocos2d-js-v3.3, and still in v3.5:
            
            It names iOS project with ' iOS' on the end.  
            
            Apple iTunes connect will initially accept this without complaing, 
            then they will wait a week, and then reject it!

            Reason: 
            
            "We found that your app does not comply with the Guidelines for
             Using Apple's Trademarks and Copyrights, as required by the App 
             Store Review Guidelines. Specifically, your app includes the use 
             of "iOS" in the app bundle name."
            
            No, you can't just rename it.  It's all signed wrong, internally.
            
            There, I just saved you a week off your app submission.
            
            Just for contrast, 'Google Play' takes about five minutes.

            Anyway, fixing the file names in this ONE PLACE cures the source of 
            that cancer.
            
        -->
        <replaceregexp match="${targetname} iOS" replace="${targetname}" flags="g" byline="true">
            <fileset file="${targetname}/frameworks/runtime-src/proj.ios_mac/Example.xcodeproj/project.pbxproj" />
        </replaceregexp>

<property name="android.certificate.absolute" location="${android.certificate}" />
<echo file="${targetname}/frameworks/runtime-src/proj.android/ant.properties" append="true" >
# Tack on keystore data, as cocos would have made you type it in.
# Note: This is stored in the clear, where it could find its way into version 
# control, where it definitely should not be.
# You can put an Android app through the app store with your self-signed
# certificate, but you shouldn't put it places where others might find it.
key.store=${android.certificate.absolute}
key.store.password=${android.certificate.password}
key.alias=android.keystore
key.alias.password=${android.certificate.alias.password}
</echo>

        <!-- Make copy of project web base64 encoded images (only if newer) -->
        <copy todir="myframeworks/web" >
            <fileset dir="${targetname}/frameworks/cocos2d-html5">
                <include name="Base64Images.js" />
            </fileset>
        </copy>
        
        <!-- Make copy of project AndroidManifest.xml (only if newer) -->
        <copy todir="myframeworks/android" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.android/">
                <include name="AndroidManifest.xml" />
            </fileset>
        </copy>

        <!-- Make copy of Android icons/artwork (only if newer) -->
        <copy todir="myframeworks/android/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.android/res">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of iOS icons/artwork (only if newer) -->
        <copy todir="myframeworks/ios/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.ios_mac/ios">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of Mac icons/artwork (only if newer) -->
        <copy todir="myframeworks/mac/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.ios_mac/mac">
                <include name="**/*.icns" />
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
        <!-- Make copy of Linux icons/artwork (only if newer) -->
        <copy todir="myframeworks/linux/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.linux">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of Windows icons/artwork (only if newer) -->
        <copy todir="myframeworks/win32/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.win32">
                <include name="**/*.ico" />
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
        <!-- Make copy of Windows 8.1 icons/artwork (only if newer) -->
        <copy todir="myframeworks/win8.1/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.win8.1-universal">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of Windows Phone 8 icons/artwork (only if newer) -->
        <copy todir="myframeworks/wp8/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.wp8-xaml">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
    </target>

    <target name="web.configure" >
        <echo>Updating web resources...</echo>
		
        <!-- Copy the artwork back -->
        <copy todir="${targetname}/frameworks/cocos2d-html5" >
            <fileset dir="myframeworks/web">
                <include name="Base64Images.js" />
            </fileset>
        </copy>
    </target>

    <!--
        Web is the best supported version, especially to debug in.
        
        Most browsers have an excellent 'developer tools' menu.  Much better than
        you'll find in 'Eclipse' or other GUI front-ends.  If there's something
        'logically' wrong with your app, this is the only deep inspection tool
        that works.
        
        However, you'll have to resort to tracing and shotgun debugging, if it 
        works fine in javascript, but not so well on one of the other target 
        platforms.  The debuggers Cocos2d IDE provides were nearly useless.

        Many browsers even have some kind of device emulation... so you can 
        spend more time on the desktop, tinkering with the particulars of how
        it lays out 'wrong' on a banana-shaped phone.
        https://developers.google.com/web/fundamentals/tools/devices/browseremulation?hl=en

        Safari hides it.  You need to go to 'Preferences->Advanced Tab', and
        click the checkbox 'Show Develop mnu in menu bar', at the bottom.  Then 
        you'll get a 'Develop' menu item. You need it to trace/debug iOS devices.

        On your iThing (iOS 6.0 or above), find the Safari settings, scroll to 
        the 'Advanced' settings, at the very bottom, and turn on 'Web Inspector'.
        
        Theoretically, when you plug an ios device in, and launch the web browser
        on your web page, it will end up in the 'Developer' menu, where you can 
        connect to it.
        
        Similarly, Chrome is needed to trace/debug Chrome devices, but at least
        there was a single, coherent article about that.
        
        https://developer.chrome.com/devtools/docs/remote-debugging

        Most browsers have a hotkey... Ctrl+Alt+I, Cmd+Alt+I 
        
        For IE, it's F-12... unless it's greyed out.  Then you get to try all
        kinds of things, because Microsoft decided you weren't worthy.  Then you
        get to google for answers, until one of them 'fixes' it.
        
        Try 'Reset IE', in the 'Advanced' settings tab.
        
    -->    
    <target name="web" description="Make Web" depends="web.configure" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p web -m release --advanced" />
    </target>

    <target name="runweb" description="Run Web" depends="web.configure" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p web -m release --advanced" />
    </target>

    <target name="debugweb" description="Debug Web" depends="web.configure" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p web -m debug" />
    </target>

    <!-- Make an android certificate, if it doesn't exist -->
	<target name="checkandroidcert" >
		<available property="androidcert.available" file="${android.certificate}" />
	</target>
	<target name="androidcert" description="Build Self-Signed Certificate for Android" unless="androidcert.available" depends="checkandroidcert">
		<exec executable="keytool" searchpath="true" vmlauncher="false" failonerror="true" >
		    <arg line="-genkey -keyalg RSA -validity 9999"/>
		    <arg line="-dname '${android.certificate.dname}'"/>
		    <arg line="-keystore ${android.certificate}"/>
		    <arg line="-storepass ${android.certificate.password}"/>
		    <arg line="-alias ${android.certificate.alias}"/>
		    <arg line="-keypass ${android.certificate.alias.password}"/>
		</exec>
	</target>

    <target name="android.configure" depends="androidcert" >
        <echo>Updating android resources...</echo>
		
        <!-- Update AndroidManifest.xml (only if newer) -->
        <copy todir="${targetname}/frameworks/runtime-src/proj.android" >
            <fileset dir="myframeworks/android/">
                <include name="AndroidManifest.xml" />
            </fileset>
        </copy>

        <!-- Update Android icons/artwork (only if newer) -->
        <copy todir="myframeworks/android/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.android/res">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
    </target>

    <target name="android" description="Make Android" depends="android.configure" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p android -m release --ndk-mode release" /> 
    </target>
    
    <target name="runandroid" description="Run Android" depends="android.configure" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p android -m release --ndk-mode release" />
    </target>

    <target name="debugandroid" description="Debug Android" depends="android.configure" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p android -m debug --ndk-mode debug" /> 
    </target>
    

    <!-- Note: You need a Mac, with XCode (from app store) for iOS/OS X. -->

    <condition property="is.osx">
        <and>
            <os family="mac"/>
            <os family="unix"/>
        </and>
    </condition>

    <target name="ios.configure" if="is.osx" >
        <echo>Updating iOS resources...</echo>

        <!-- Update icons/artwork (only if newer) -->
        <copy todir="${targetname}/frameworks/runtime-src/proj.ios_mac/ios" >
            <fileset dir="myframeworks/ios/res">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
		
    </target>
    
    <target name="ios" description="Make iOS" depends="ios.configure" if="is.osx" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p ios -m release -t ${targetname} --sign-identity '${ios.sign}'" />
    </target>

    <target name="runios"  description="Run iOS" depends="ios.configure" if="is.osx" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p ios -m release -t ${targetname} --sign-identity '${ios.sign}'" />
		<!-- 
		    https://github.com/libimobiledevice/ideviceinstaller
		
		    You can install ideviceinstaller from Homebrew http://brew.sh
		    
		    The biggest obstacle for dependencies is xcode, but you already did that.
		    
		    Homebrew or MacPorts would have also installed 'ant' without any 
		    flaming hoops.  Similar to 'sudo apt-get ...', in a Debian Linux.

		    You'll probably also want SoX, LAME, ImageMagick, pngquant, optipng, 
		    while you're installing things with that.  
		    
		    Anyways, launch to a real iThing, using ad-hoc mobileprovision.
		    
		    It will (and should) fail with a .ipa, signed for the app store.
		-->
        <exec executable="ideviceinstaller" dir="${targetname}/publish/ios" failonerror="false" searchpath="true" >
            <arg line="--uninstall ${app.id}" />
        </exec>
        <exec executable="ideviceinstaller" dir="${targetname}/publish/ios" failonerror="false" searchpath="true" >
            <arg line="--install ${targetname}.ipa" />
        </exec>
    </target>

    <target name="debugios" description="Debug iOS" depends="ios.configure" if="is.osx" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p ios -m debug -t ${targetname} --sign-identity '${ios.sign}'" />
    </target>
    
    <target name="osx.configure" if="is.osx" >
        <echo>Updating OS X resources...</echo>

        <!-- Update icons/artwork (only if newer) -->
        <copy todir="${targetname}/frameworks/runtime-src/proj.ios_mac/mac" >
            <fileset dir="myframeworks/mac/res">
                <include name="**/*.icns" />
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
		
    </target>

    <target name="mac" description="Make OS X" depends="osx.configure" if="is.osx" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p mac -m release" />
    </target>

    <target name="runmac" description="Run OS X" depends="osx.configure" if="is.osx" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p mac -m release" />
    </target>

    <target name="debugmac" description="Debug OS X" depends="osx.configure" if="is.osx" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p mac -m debug" />
    </target>

    <!-- Note: You need Linux to do Linux -->
    <condition property="is.linux">
        <and>
            <os family="unix"/>
            <not><os family="mac"/></not>
        </and>
    </condition>

    <target name="linux.configure" if="is.linux" >
        <echo>Updating Linux resources...</echo>

        <!-- Update Linux icons/artwork (only if newer) -->
        <copy todir="${targetname}/frameworks/runtime-src/proj.linux" >
            <fileset dir="myframeworks/linux/res">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
		
    </target>

    <!-- Linux needs to be a Debian child -->
    <target name="linux" description="Make Linux" depends="linux.configure" if="is.linux" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p win32 -m release" />
    </target>

    <target name="runlinux" description="Run Linux" depends="linux.configure" if="is.linux" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p win32 -m release" />
    </target>
	
    <target name="debuglinux" description="Debug Linux" depends="linux.configure" if="is.linux" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p win32 -m debug" />
    </target>
    
    <!-- Note: You need Windows and Visual Studio to build a Windows target -->

    <condition property="is.windows">
        <os family="windows" />
    </condition>

    <target name="windows.configure" if="is.windows" >
        <echo>Updating Windows resources...</echo>
		
        <copy todir="myframeworks/win32/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.win32">
                <include name="**/*.ico" />
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
    </target>

    <target name="win32" description="Make Windows" depends="windows.configure" if="is.windows" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p win32 -m release" />
    </target>

    <target name="runwin32" description="Run Android" depends="windows.configure" if="is.windows" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p win32 -m release" />
    </target>
    
    <target name="debugwin32" description="Debug Windows" depends="windows.configure" if="is.windows" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p win32 -m debug" />
    </target>

    <target name="win8.1.configure" if="is.windows" >
        <echo>Updating Win8.1 resources...</echo>
		
        <copy todir="myframeworks/win8.1/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.win8.1-universal">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
    </target>

    <target name="win8.1" description="Make Win8.1" depends="win8.1.configure" if="is.windows" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p win8.1 -m release" />
    </target>

    <target name="runwin8.1" description="Run Android" depends="win8.1.configure" if="is.windows" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p win8.1 -m release" />
    </target>
    
    <target name="debugwin8.1" description="Debug Win8.1" depends="win8.1.configure" if="is.windows" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p win8.1 -m debug" />
    </target>
    
    <target name="wp8.configure" if="is.windows" >
        <echo>Updating Wp8 resources...</echo>
		
        <copy todir="myframeworks/wp8/res" >
            <fileset dir="${targetname}/frameworks/runtime-src/proj.wp8-xaml">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
    </target>

    <target name="wp8" description="Make Wp8" depends="wp8.configure" if="is.windows" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="compile -p wp8 -m release" />
    </target>

    <target name="runwp8" description="Run Android" depends="wp8.configure" if="is.windows" >
        <macro-transfer debug="false" release="true" />
		<macro-cocos command="run -p wp8 -m release" />
    </target>
    
    <target name="debugwp8" description="Debug Wp8" depends="wp8.configure" if="is.windows" >
        <macro-transfer debug="true" release="false" />
		<macro-cocos command="run -p wp8 -m debug" />
    </target>

    
    <!-- Hint: Remove unwanted projects from 'depends=' -->
    <target name="all" description="Make all release targets" depends="web,android,ios,mac,linux,win32,win8.1,wp8" >
        
    </target>
    
</project>
