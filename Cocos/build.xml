<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE project[
    <!ENTITY preprocess.debug   SYSTEM "build.debug.xml">
    <!ENTITY preprocess.release SYSTEM "build.release.xml">
]>

<!--
    A build script wrapping cocos?  Am I insane?  Yes... but that's not the point.
    
    The point is, where I observed behavior where Cocos2D-js *removed* the 
    contents of its src folder.  I don't like that.
    
    Also, keeping the res imports in resource.js straight, by hand, and editing 
    the project.json by hand, to keep adding source code was tedious.

    On top of that, I'd rather like to have the option to add/remove a few 'macro'
    definitions, to improvise some regular expression style code alterations, to
    add/remove code and defintions to/from different build flavors.  That's 
    almost certainly buried in cocos, somewhere, but the simplified interface
    hides it from me, and I don't want to go digging into the bottomless rabbit
    hole, modifying things, when I just want to write a game.
    
    See also: 'If And Unless'
    https://ant.apache.org/manual/ifunless.html
-->
<project name="Cocos Gauntlets Build"
    xmlns:if="ant:if" xmlns:unless="ant:unless"
    basedir="."  default="web" >

	<!-- 
	    The 'quiet' flag breaks builds under Windows... 
	    
	    If you're not building under windows, then this makes the Cocos2D output
	    a lot less spammy.

	    However, in the Windows version, this spammy output actually makes it 
	    work.  Things aren't synced right, but the spew slows it down enough
	    that the problem doesn't manifest.  Otherwise you get a failed build
	    and 'the process cannot access the file because it is being used by 
	    another process.' error in the log.  Race condition!

	    Similarly, if you have trouble running the release web app, try  
	    removing the 'advanced' flag from the release build.
	    
	    For people new to ant build scripts, setting a property sets it in 
	    stone.  Any changes made later to the property don't take effect.
	    
	-->
	<property name="build.options" value="" />
    <property name="build.options" value="--quiet" />

    <!-- Helpers for regular expression preprocessor -->
    <property name="rxFunc" value="(^|[\t ]+)" />
    <property name="rxConst" value="=(^|[\t (]+)" />
    <property name="rxEatArgs" value="[ \t]*(\([^)]*\);)" />
    <property name="rxParens" value="[ \t]*\([\t ]*(.*)[\t ]*\)" />
    <property name="rxArg" value="[ \t]*\([\t ]*(.*)[\t ]*\);" />
    <property name="rxFirstArg" value="[ \t]*\(([^,]*)," />
    <property name="rxGetArg" value=",([^,]*)," />
    <property name="rxLastArg" value=",([^)]*)\)" />

    <!-- 
        This allow you to override certain, private settings with your own folder  
        in ~/ant/build.properties.  Like passwords and device IDs.
    -->
	<property file="${user.home}/ant/build.properties"/>

	<!-- Import settings from environment -->
	<property environment="env" />

	<!-- Get paths from 'ant -f setup.xml' -->
    <property file="../configure.properties"/>
	
	<!-- Import build.properties, for project -->
	<property file="build.properties"/>
	
    <!-- OS Detection -->
    <condition property="is.windows">
        <os family="windows" />
    </condition>
    <condition property="is.osx">
        <and>
            <os family="mac"/>
            <os family="unix"/>
        </and>
    </condition>
    <condition property="is.linux">
        <and>
            <os family="unix"/>
            <not><os family="mac"/></not>
        </and>
    </condition>

    <!-- Configure Path vs PATH, because exec task has long-standing bug with PATH -->
    <property if:set="is.windows" name="os.PATH" value="Path" />
    <property if:set="is.windows" name="os.OLDPATH" value="${env.Path}" />
    <property unless:set="is.windows" name="os.PATH" value="PATH" />
    <property unless:set="is.windows" name="os.OLDPATH" value="${env.PATH}" />

    <!-- Determine if project is up-to-date -->
	<macrodef name="macro-uptodate" >
		<attribute name="targetfile"/>  <!-- Which file in publish folder --> 
		<attribute name="property"/>    <!-- What property to set with answer -->
        
	    <sequential>
        <uptodate targetfile="${APP_DEPLOY_DIR}/@{targetfile}" property="@{property}">
            <srcfiles dir="." includes="build.*"/>
            <srcfiles dir="${APP_SOURCE_DIR}" includes="**/*"/>
            <srcfiles dir="res" includes="**/*"/>
            <srcfiles dir="${APP_FRAMEWORKS_DIR}" includes="**/*"/>
        </uptodate>
        </sequential>
	</macrodef>

	
    <!-- Invoke cocos in various prescribed manners -->
	<macrodef name="macro-cocos">
		<attribute name="command"/>		<!-- Command line for cocos -->
		<attribute name="dirname" default="${APP_TARGETNAME}"/>
		<sequential>
			<tstamp />
            
            <!--
                Invoke cocos
                
               -p win32, web, mac, wp8, metro, linux, android, ios

                <echoproperties/>
            -->
			<exec executable="${SHELL}" dir="@{dirname}" failonerror="true" searchpath="true" >
			    <env key="ANT_ROOT" value="${ANT_ROOT}" />
			    <env key="COCOS_CONSOLE_ROOT" value="${COCOS_CONSOLE_ROOT}" />
			    <env key="COCOS_FRAMEWORKS" value="${COCOS_FRAMEWORKS}" />
			    <env key="ANDROID_SDK_ROOT" value="${ANDROID_SDK_ROOT}" />
			    <env key="NDK_ROOT" value="${NDK_ROOT}" />
			    <env key="${os.PATH}" path="${PYTHON_ROOT}:${ANDROID_SDK_ROOT}:${COCOS_FRAMEWORKS}:${COCOS_CONSOLE_ROOT}:${os.OLDPATH}"/>

                <arg line="${SHELL.c} 'cocos @{command} ${build.options}'" />

			    <!-- Filter stderr, to point back at original source paths... -->
				<redirector>
					<errorfilterchain>
						<replaceregex 
							pattern="@{dirname}/src[/\\]" 
							replace="src/" />
					</errorfilterchain>
				</redirector>			    
            </exec>
        </sequential>
	</macrodef>

	
    <filterset id="preprocess-constants" begintoken="${" endtoken="}" recurse="true" >
        <filtersfile file="./build.properties" />
        <filtersfile file="./build_constants.properties" />
    </filterset>
	
	<macrodef name="macro-preprocess-debug">
        <sequential>
            <tstamp />
            <copy todir="${APP_TARGETNAME}/src" overwrite="true" >
                <fileset dir="${APP_SOURCE_DIR}">
                    <include name='**/*.js'/>
                    <include name='**/*.json'/>
                    <exclude name="manifest.json"/>
                    <exclude name="main.js"/>
                </fileset>
                <filterset refid="preprocess-constants" />
                <filterchain>
                    &preprocess.debug;
                </filterchain>
            </copy>
            <copy todir="${APP_TARGETNAME}" overwrite="true" >
                <fileset dir="${APP_SOURCE_DIR}">
                    <include name="main.js"/>
                    <include name="manifest.json"/>
                    <include name='**/*.html'/>
                    <include name='**/*.css'/>
                </fileset>
                <filterset refid="preprocess-constants" />
                <filterchain>
                    &preprocess.debug;
                </filterchain>
            </copy>

			<sort>
                <fileset dir="${APP_SOURCE_DIR}" id="src.files" >
                    <include name='**/*.js'/>
                    <exclude name="main.js"/>
				</fileset>
				<name/>
			</sort>
            
            <!-- Generate a debug mode project.json from source files -->
            <pathconvert refid="src.files" property="src.filelist" pathsep="${line.separator}">
                <chainedmapper>
					<filtermapper><replacestring from="\" to="/"/></filtermapper>
                    <regexpmapper from="^.*?/(src/.*)$" to='        "\1",' />
                </chainedmapper>
            </pathconvert>
<!-- Can't add a 'generated by' comment, because json doesn't support comments -->
<echo file="${APP_TARGETNAME}/project.json" append="false">
{
    "project_type": "javascript",
    "debugMode" : 1,
    "showFPS" : true,
    "frameRate" : 60,
    "id" : "gameCanvas",
    "renderMode" : 0,
    "engineDir":"frameworks/cocos2d-html5",
    "modules" : ["cocos2d","cocostudio","gui"],
    "jsList" : [
${src.filelist}
        "src/resource.js"
    ]
}
</echo>
            
        </sequential>
    </macrodef>
	
	<macrodef name="macro-preprocess-release">
        <sequential>
            <tstamp />
            <copy todir="${APP_TARGETNAME}/src" overwrite="true" filtering="true" >
                <fileset dir="${APP_SOURCE_DIR}">
                    <include name='**/*.js'/>
                    <exclude name="main.js"/>
                </fileset>
                <filterset refid="preprocess-constants" />
                <filterchain>
                    &preprocess.release;
                </filterchain>
            </copy>
            <copy todir="${APP_TARGETNAME}" overwrite="true" filtering="true" >
                <fileset dir="${APP_SOURCE_DIR}">
                    <include name="main.js"/>
                    <include name='**/*.html'/>
                    <include name='**/*.css'/>
                </fileset>
                <filterset refid="preprocess-constants" />
                <filterchain>
                    &preprocess.release;
                </filterchain>
            </copy>
			<sort>
                <fileset dir="${APP_SOURCE_DIR}" id="src.files" >
                    <include name='**/*.js'/>
                    <exclude name="main.js"/>
				</fileset>
				<name/>
			</sort>

            <!-- Generate a release mode project.json from source files -->
            <pathconvert refid="src.files" property="src.filelist" pathsep="${line.separator}">
                <chainedmapper>
					<filtermapper><replacestring from="\" to="/"/></filtermapper>
                    <regexpmapper from="^.*?/(src/.*)$" to='        "\1",' />
                </chainedmapper>
            </pathconvert>
<!-- Can't add a 'generated by' comment, because json doesn't support comments -->
<echo file="${APP_TARGETNAME}/project.json" append="false">
{
    "project_type": "javascript",
    "debugMode" : 1,
    "showFPS" : false,
    "frameRate" : 60,
    "id" : "gameCanvas",
    "renderMode" : 0,
    "engineDir":"frameworks/cocos2d-html5",
    "modules" : ["cocos2d","cocostudio","gui"],
    "jsList" : [
${src.filelist}
        "src/resource.js"
    ]
}
</echo>
        </sequential>
	</macrodef>
	
    <!-- Copy res folder and generates imports for app to load them -->
    <macrodef name="copy.resources" >
    <sequential>
        <!-- Build resource.js from file list -->
        <copy todir="${APP_TARGETNAME}/res" >
            <fileset dir="res">
                <include name='**/*'/>
            </fileset>
        </copy>            
        <pathconvert property="res.files" pathsep="${line.separator}">
        <!-- 
        	Wrapping with sort is a NOP, but under Windows, 'res.files' won't  
        	be set with a naked <filset>
        -->
        <sort>
            <fileset id="res.files" dir="res">
                <include name='**/*'/>
                <exclude name="*.ico"/>
                <exclude name="*.js"/>
            </fileset>
            <name/>
        </sort>
        </pathconvert>
        <!-- Generate a list of paths for loader to load -->
        <pathconvert property="res.pushy" refid="res.files" pathsep="${line.separator}">
            <chainedmapper>
				<filtermapper><replacestring from="\" to="/"/></filtermapper>
				<scriptmapper language="javascript">
                    var relpath = source.substring(source.indexOf('/res/')+1);
                    self.addMappedName('    "'+relpath+'",');
                </scriptmapper>
            </chainedmapper>
        </pathconvert>
        <!-- Generate a dictionary to paths - Cheat with scriptmapper! -->
        <pathconvert property="res.labeled" refid="res.files" pathsep="${line.separator}">
            <chainedmapper>
				<filtermapper><replacestring from="\" to="/"/></filtermapper>
                <scriptmapper language="javascript">
                    var relpath = source.substring(source.indexOf('/res/')+5);
                    var label = relpath.replace(/[^A-Z0-9a-z]/ig,'_');
                    self.addMappedName("    "+label+': "res/'+relpath+'",');
                </scriptmapper>
            </chainedmapper>
        </pathconvert>
<echo file="${APP_TARGETNAME}/src/resource.js" append="false">/* Generated by build.xml */
/* Global Resources, generated by build.xml */ 
var g_resources = [
${res.pushy}
];
/* res.resource_type stuff */
var res = {
${res.labeled}
};
</echo>
    </sequential>
    </macrodef>
    
	<!--
	    Caution: Re-running 'ant init' will be potentially destructive to any 
	    existing changes that you were forced to make in XCode, and maybe other
	    things.
	    
	    Have your icons and such under version control, if you run this again.
	    
	    It may be profitable to have xcode running when you do this to re-init, 
	    as it should overwrite the 'correct' settings when it saves...
	-->
    <target name="init" description="Initialize/Re-initialize Cocos2D-js Project" >
        <echo>Initializing Project with Cocos</echo>

        <!-- Nuke the folder, if it already exists -->
        <delete dir="${APP_TARGETNAME}" includeemptydirs="true" quiet="true" />
        
        <!-- Have git ignore most of this stuff. -->
<echo file=".gitignore" append="false">#Cocos2d-js boilerplate
# Foresake all of Cocos2d's project tree from version control.
# We can just rebuild it, so it's tens of thousands of files of boilerplatr and  
# intermediate files with a few minor tweaks scattered among them.
${APP_TARGETNAME}
# Excluding this from git, because it's just generated for this project.
# If you're sharing with team mates, you probably don't want to exclude it.
${APP_DEPLOY_DIR}
</echo>

        <!-- Have cocos make the project -->
		<macro-cocos dirname="." command="new ${APP_TARGETNAME} --package ${APP_PACKAGE_ID} --language js" />

        <!-- 
            Big, bad iOS BUG in cocos2d-js-v3.3, and still in v3.5:
            
            It names iOS project with ' iOS' on the end.  
            
            Apple iTunes connect will initially accept this without complaing, 
            then they will wait a week, and then reject it!

            Reason: 
            
            "We found that your app does not comply with the Guidelines for
             Using Apple's Trademarks and Copyrights, as required by the App 
             Store Review Guidelines. Specifically, your app includes the use 
             of "iOS" in the app bundle name."
            
            No, you can't just rename it.  It's all signed wrong, internally.
            
            There, I just saved you a week off your app submission.
            
            Just for contrast, 'Google Play' takes about five minutes.

            Anyway, fixing the file names in this ONE PLACE cures the source of 
            that cancer.

        -->
        <replaceregexp match="${APP_TARGETNAME} iOS" replace="${APP_TARGETNAME}" flags="g" byline="true">
            <fileset file="${APP_TARGETNAME}/frameworks/runtime-src/proj.ios_mac/Example.xcodeproj/project.pbxproj" />
        </replaceregexp>


<path id="android.cert.DOS">
    <pathelement path="${android.certificate}" />
</path>
<pathconvert targetos="unix" property="android.cert.unix" refid="android.cert.DOS"/>
<echo file="${APP_TARGETNAME}/frameworks/runtime-src/proj.android/ant.properties" append="true" >
# Tack on keystore data, as cocos would have made you type it in. Very manually.
# Note: This is stored in the clear, where it could find its way into version 
# control, and other places where it definitely should not be.
# You can put an Android app through the app store with your self-signed
# certificate, but you shouldn't put it places where others might find it.
key.store=${android.cert.unix}
key.store.password=${android.certificate.password}
key.alias=android.keystore
key.alias.password=${android.certificate.alias.password}
</echo>
<!-- 
    This 'echo+cdata' dikes out a block of comands that are probably unwanted in 
    most situations, since these resources are under version control. 
    
    Only useful if you're starting 'truly from scratch', or get a new version of
    Cocos2d, with more icons/resources defined.
    
    As a fake '#if 0', it will only add a bit of spew to the excruciatingly 
    spew-filled '-debug' output.
    
    It would be nice if ant offered a 'comment' task.
-->

        <!-- 
            Grab icons that don't exist in container
        -->

        <!-- Make copy of project web base64 encoded images (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/web/Base64Images.js" property="init_exists_Base64Images.js"/>
        <copy unless:set="init_exists_Base64Images.js" todir="${APP_FRAMEWORKS_DIR}/web" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/cocos2d-html5">
                <include name="Base64Images.js" />
            </fileset>
        </copy>
        
        <!-- Make copy of project AndroidManifest.xml (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/android/AndroidManifest.xml" property="init_exists_AndroidManifest.xml"/>
        <copy unless:set="init_exists_AndroidManifest.xml" todir="${APP_FRAMEWORKS_DIR}/android" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.android/">
                <include name="AndroidManifest.xml" />
            </fileset>
        </copy>

        <!-- Make copy of Android icons/artwork (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/android/res/drawable-ldpi/icon.png" property="init_exists_icon.png"/>
        <copy unless:set="init_exists_icon.png" todir="${APP_FRAMEWORKS_DIR}/android/res" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.android/res">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of iOS icons/artwork (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/ios/res/Icon-29.png" property="init_exists_Icon-29.png"/>
        <copy unless:set="init_exists_Icon-29.png" todir="${APP_FRAMEWORKS_DIR}/ios/res" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.ios_mac/ios">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of Mac icons/artwork (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/mac/res/icon.icns" property="init_exists_icon.icns"/>
        <copy unless:set="init_exists_icon.icns" todir="${APP_FRAMEWORKS_DIR}/mac/res" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.ios_mac/mac">
                <include name="**/*.icns" />
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
        <!-- Make copy of Linux icons/artwork (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/linux/res/icon.png" property="init_exists_icon.png"/>
        <copy unless:set="init_exists_icon.png" todir="${APP_FRAMEWORKS_DIR}/linux/res" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.linux">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of Windows icons/artwork (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/win32/res/game.ico" property="init_exists_game.ico"/>
        <copy unless:set="init_exists_game.ico" todir="${APP_FRAMEWORKS_DIR}/win32/res" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.win32">
                <include name="**/*.ico" />
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
        <!-- Make copy of Windows 8.1 icons/artwork (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/win8.1/res/App.Windows/Assets/Logo.scale-100.png" property="init_exists_Logo.scale-100.png"/>
        <copy unless:set="init_exists_Logo.scale-100.png" todir="${APP_FRAMEWORKS_DIR}/win8.1/res" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.win8.1-universal">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

        <!-- Make copy of Windows Phone 8 icons/artwork (only if newer) -->
        <available file="${APP_FRAMEWORKS_DIR}/wp8/res/App/Assets/SplashScreenImage.jpg" property="init_exists_SplashScreenImage.jpg"/>
        <copy unless:set="init_exists_SplashScreenImage.jpg" todir="${APP_FRAMEWORKS_DIR}/wp8/res" preservelastmodified="true" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.wp8-xaml">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
    
        <!-- Make the deployment folder -->
        <mkdir dir="${APP_DEPLOY_DIR}"/>

        <echo if:set="is.osx">
Now that we've done that, be sure to verify settings in XCODE for OSX/iOS.

Open ${APP_TARGETNAME}/frameworks/runtime-src/proj.ios_mac/${APP_TARGETNAME}.xcodeproj

Click on the top-level '${APP_TARGETNAME}' on the project tree.

Check 'General' tab, for the 'Team' 

Under 'Build Settings', check 'Code Signing'

Re-do whatever else you may have touched in there. 

Let it finish its 'busy' status.
</echo>
    </target>


    <!--
        Web is the best supported version, especially to debug in.
        
        Most browsers have an excellent 'developer tools' menu.  Much better than
        you'll find in 'Eclipse' or other GUI front-ends.  If there's something
        'logically' wrong with your app, this is the only deep inspection tool
        that works.
        
        However, you'll have to resort to tracing and shotgun debugging, if it 
        works fine in javascript, but not so well on one of the other target 
        platforms.  The debuggers Cocos2d IDE provides were nearly useless.

        Many browsers even have some kind of device emulation... so you can 
        spend more time on the desktop, tinkering with the particulars of how
        it lays out 'wrong' on a banana-shaped phone.
        https://developers.google.com/web/fundamentals/tools/devices/browseremulation?hl=en

        Safari hides it.  You need to go to 'Preferences->Advanced Tab', and
        click the checkbox 'Show Develop mnu in menu bar', at the bottom.  Then 
        you'll get a 'Develop' menu item. You need it to trace/debug iOS devices.

        On your iThing (iOS 6.0 or above), find the Safari settings, scroll to 
        the 'Advanced' settings, at the very bottom, and turn on 'Web Inspector'.
        
        Theoretically, when you plug an ios device in, and launch the web browser
        on your web page, it will end up in the 'Developer' menu, where you can 
        connect to it.
        
        Similarly, Chrome is needed to trace/debug Chrome devices, but at least
        there was a single, coherent article about that.
        
        https://developer.chrome.com/devtools/docs/remote-debugging

        Most browsers have a hotkey... Ctrl+Alt+I, Cmd+Alt+I 
        
        For IE, it's F-12... unless it's greyed out.  Then you get to try all
        kinds of things, because Microsoft decided you weren't worthy.  Then you
        get to google for answers, until one of them 'fixes' it.
        
        Try 'Reset IE', in the 'Advanced' settings tab.  Then google for more.

    -->    
    <target name="web.configure" >
		<macro-uptodate targetfile="web/index.html" property="web.uptodate" />

        <sequential unless:set="web.uptodate">

            <echo>Updating web resources...</echo>

            <copy.resources/>
            
            <!-- Copy the artwork back -->
            <copy todir="${APP_TARGETNAME}/frameworks/cocos2d-html5" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/web">
                    <include name="Base64Images.js" />
                </fileset>
            </copy>

            <!-- Copy icon file to root of web site -->
            <copy todir="${APP_TARGETNAME}" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/web">
                    <include name="favicon.ico" />
                </fileset>
            </copy>

            <!-- Copy icon folder to root of web site -->
            <mkdir dir="${APP_TARGETNAME}/icons" />
            <copy todir="${APP_TARGETNAME}/icons" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/web/icons">
                    <include name="**/*" />
                </fileset>
            </copy>

            <!-- Copy 'web app' manifest(s) -->
            <copy todir="${APP_TARGETNAME}" overwrite="true" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/web">
                    <include name='*.xml'/>
                    <include name='*.json'/>
                </fileset>
                <filterset refid="preprocess-constants" />
            </copy>
            
        </sequential>
    </target>

    <target name="web" description="Make Web" depends="web.configure" unless="web.uptodate" >
        <!-- Keep strays from being left in res or src -->
        <delete includeemptydirs="true" quiet="true" >
            <fileset dir="${APP_DEPLOY_DIR}/web" includes="**/*"/>
        </delete>

        <macro-preprocess-release />
		<macro-cocos command="compile -p web -m release --advanced --source-map" />
		<copy todir="${APP_DEPLOY_DIR}/web">
            <fileset dir="${APP_TARGETNAME}/publish/html5" >
                <include name="**/*" />
            </fileset>
        </copy>
		<copy todir="${APP_DEPLOY_DIR}/web">
            <fileset dir="${APP_TARGETNAME}" >
                <include name="*.json" />
                <include name="favicon.ico" />
            </fileset>
        </copy>
        
        <!-- Copy icon folder to root of web site -->
        <mkdir dir="${APP_DEPLOY_DIR}/web/icons" />
        <copy todir="${APP_DEPLOY_DIR}/web/icons" >
            <fileset dir="${APP_FRAMEWORKS_DIR}/web/icons">
                <include name="**/*" />
            </fileset>
        </copy>

        <!-- Copy 'web app' manifest(s) -->
        <copy todir="${APP_DEPLOY_DIR}/web" overwrite="true" >
            <fileset dir="${APP_FRAMEWORKS_DIR}/web">
                <include name='*.xml'/>
                <include name='*.json'/>
            </fileset>
            <filterset refid="preprocess-constants" />
        </copy>
    </target>

    <target name="runweb" description="Run release mode web app." depends="web" >
        <echo>Starting web server.  Kill it with Ctrl+C, when you're done.</echo>
        <!-- Use the handy test server+launch in Cocos -->
	    <macro-cocos command='run -s "./${APP_DEPLOY_DIR}/web" -p web' />
    </target>
    
    <target name="webdebug" description="Make Web Debug Build" depends="web.configure" >

        <!-- Keep strays from being left in res or src -->
        <delete includeemptydirs="true" quiet="true" >
            <fileset dir="${APP_DEPLOY_DIR}/webdebug" includes="**/*"/>
        </delete>
    
        <macro-preprocess-debug />
		<macro-cocos command="compile -p web -m debug" />

		<!-- 
		    Generate runnable 'debug' version for local 
		    Client may want internal debug version
		    Yes, this will literally 're-invent' project and paths into local ${APP_DEPLOY_DIR}/web
		-->
		<copy todir="${APP_DEPLOY_DIR}/webdebug/src">
            <fileset dir="${APP_TARGETNAME}/src" >
                <include name="**/*" />
            </fileset>
        </copy>
		<copy todir="${APP_DEPLOY_DIR}/webdebug/res">
            <fileset dir="${APP_TARGETNAME}/res" >
                <include name="**/*" />
            </fileset>
        </copy>
		<copy todir="${APP_DEPLOY_DIR}/webdebug">
            <fileset dir="${APP_TARGETNAME}" >
                <include name="*.html" />
                <include name="*.json" />
                <include name="main.js" />
                <include name="favicon.ico" />
            </fileset>
        </copy>
		<copy todir="${APP_DEPLOY_DIR}/webdebug/frameworks/cocos2d-html5">
            <fileset dir="${APP_TARGETNAME}/frameworks/cocos2d-html5" >
                <include name="**/*" />
            </fileset>
        </copy>
        
        <!-- Copy icon folder to root of web site -->
        <mkdir dir="${APP_DEPLOY_DIR}/webdebug/icons" />
        <copy todir="${APP_DEPLOY_DIR}/webdebug/icons" >
            <fileset dir="${APP_FRAMEWORKS_DIR}/web/icons">
                <include name="**/*" />
            </fileset>
        </copy>

        <!-- Copy 'web app' manifest(s) -->
        <copy todir="${APP_DEPLOY_DIR}/web" overwrite="true" >
            <fileset dir="${APP_FRAMEWORKS_DIR}/web">
                <include name='*.xml'/>
                <include name='*.json'/>
            </fileset>
            <filterset refid="preprocess-constants" />
        </copy>

    </target>

    <target name="debugweb" description="Run debug mode web app." depends="webdebug" >
        <!-- Use the handy test server+launch in Cocos -->
	    <macro-cocos command='run -s "./${APP_DEPLOY_DIR}/webdebug" -p web' />
    </target>


    <target name="android.configure" >

        	<macro-uptodate targetfile="${APP_TARGETNAME}.apk" property="android.uptodate" />
    
        <sequential unless:set="android.uptodate">
        
            <echo>Updating android resources...</echo>

            <copy.resources/>

            <!-- Generate certificate, if it doesn't exist -->
            <available property="androidcert.available" file="${android.certificate}" />
            <exec unless:set="androidcert.available" executable="keytool" searchpath="true" vmlauncher="false" failonerror="true" >
                <arg line="-genkey -keyalg RSA -validity 9999"/>
                <arg line="-dname '${android.certificate.dname}'"/>
                <arg line="-keystore ${android.certificate}"/>
                <arg line="-storepass ${android.certificate.password}"/>
                <arg line="-alias ${android.certificate.alias}"/>
                <arg line="-keypass ${android.certificate.alias.password}"/>
            </exec>

            <!-- Update AndroidManifest.xml (only if newer) -->
            <copy todir="${APP_TARGETNAME}/frameworks/runtime-src/proj.android" overwrite="true" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/android/">
                    <include name="AndroidManifest.xml" />
                </fileset>
                <filterset begintoken="${" endtoken="}" recurse="true" >
                    <filtersfile file="./build.properties" />
                    <filtersfile file="./build_constants.properties" />
                </filterset>
            </copy>
    
            <!-- Update Android icons/artwork (only if newer) -->
            <copy todir="${APP_TARGETNAME}/frameworks/runtime-src/proj.android/res" overwrite="true" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/android/res">
                    <include name="**/*.png" />
                    <include name="**/*.jpg" />
                    <include name="**/*.gif" />
                </fileset>
            </copy>
            
        </sequential>
    </target>

    <target name="android" description="Make Android" depends="android.configure" unless="android.uptodate" >
        <macro-preprocess-release />
        <macro-cocos command="compile -p android -m release --ndk-mode release ${android.version.param}" /> 
        <copy tofile="${APP_DEPLOY_DIR}/${APP_TARGETNAME}.apk"><fileset file="${APP_TARGETNAME}/publish/android/${APP_TARGETNAME}-release-signed.apk"/></copy>
    </target>

    <target name="androiddebug" description="Make Debug Android" depends="android.configure" >
        <macro-preprocess-debug />
		<macro-cocos command="compile -p android -m debug --ndk-mode debug ${android.version.param}" /> 
    </target>
    
    <target name="runandroid" description="run Android" depends="android" >

    	<sequential>
			<exec executable="${android.adb}" dir="." failonerror="false" searchpath="false" >
				<arg line="-a uninstall ${APP_PACKAGE_ID}"/>
			</exec>
			<exec executable="${android.adb}" dir="." failonerror="false" searchpath="false" >
				<arg line="-a install ${APP_DEPLOY_DIR}/${APP_TARGETNAME}.apk"/>
			</exec>
			<exec executable="${android.adb}" dir="." failonerror="false" searchpath="false" >
				<arg line="-a shell monkey -p ${APP_PACKAGE_ID} -c android.intent.category.LAUNCHER 1"/>
			</exec>
    	</sequential>
    
    </target>

    <target name="debugandroid" description="Debug Android" depends="android.configure" >
		<macro-preprocess-debug />
    	<sequential>
			<exec executable="${android.adb}" dir="." failonerror="false" searchpath="false" >
				<arg line="-a logcat -c"/>
			</exec>
			<macro-cocos command="run -p android -m debug --ndk-mode debug ${android.version.param}" />
			<echo>${line.separator}${line.separator}${line.separator}Trace Output${line.separator}${line.separator}${line.separator}</echo>
			<exec executable="${android.adb}" dir="." failonerror="false" searchpath="false" >
				<arg line="-a logcat -s AndroidRuntime" />
			</exec>
		</sequential>
	</target>
    

    <!-- Note: You need a Mac, with XCode (from app store) for iOS/OS X. -->
    <target name="ios.configure" if="is.osx" >
        	<macro-uptodate targetfile="${APP_TARGETNAME}.ipa" property="ios.uptodate" />
    
        <sequential unless:set="ios.uptodate">
    
            <echo>Updating iOS resources...</echo>
            <copy.resources/>
    
            <!-- Update icons/artwork (only if newer) -->
            <copy todir="${APP_TARGETNAME}/frameworks/runtime-src/proj.ios_mac/ios" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/ios/res">
                    <include name="**/*.png" />
                    <include name="**/*.jpg" />
                    <include name="**/*.gif" />
                </fileset>
            </copy>
        </sequential>
		
    </target>
    
    <target name="ios" description="Make iOS" depends="ios.configure" if="is.osx" unless="ios.uptodate" >
        <macro-preprocess-release />
		<macro-cocos command="compile -p ios -m release -t ${APP_TARGETNAME} --sign-identity '${ios.sign}'" />
		<copy todir="${APP_DEPLOY_DIR}"><fileset file="${APP_TARGETNAME}/publish/ios/${APP_TARGETNAME}.ipa"/></copy>
    </target>

    <target name="iosdebug" description="Make Debug Mode iOS" depends="ios.configure" if="is.osx" >
        <macro-preprocess-debug />
		<macro-cocos command="compile -p ios -m debug -t ${APP_TARGETNAME} --sign-identity '${ios.sign}'" />
    </target>

    <target name="runios" description="Run iOS" depends="ios" if="is.osx" >
		<!-- 
		    https://github.com/libimobiledevice/ideviceinstaller

		    You can install ideviceinstaller from Homebrew http://brew.sh
		    
		    The biggest obstacle for dependencies is xcode, but you already did that.
		    
		    Homebrew or MacPorts would have also installed 'ant' without any 
		    flaming hoops.  Similar to 'sudo apt-get ...', in a Debian Linux.

		    You'll probably also want SoX, LAME, ImageMagick, pngquant, optipng, 
		    while you're installing things with that.  
		    
		    Anyways, launch to a real iThing, using ad-hoc mobileprovision.
		    
		    It will (and should) fail with a .ipa, signed for the app store.
		-->
        <exec executable="ideviceinstaller" dir="${APP_DEPLOY_DIR}" failonerror="false" searchpath="true" >
            <arg line="--uninstall ${APP_PACKAGE_ID}" />
        </exec>
        <exec executable="ideviceinstaller" dir="${APP_DEPLOY_DIR}" failonerror="false" searchpath="true" >
            <arg line="--install ${APP_TARGETNAME}.ipa" />
        </exec>
    </target>
    
    <target name="debugios" description="Debug iOS" depends="iosdebug" if="is.osx" >
        <macro-preprocess-debug />
		<macro-cocos command="run -p ios -m debug -t ${APP_TARGETNAME} --sign-identity '${ios.sign}'" />
    </target>
    
    <target name="osx.configure" if="is.osx" >
        	<macro-uptodate targetfile="${APP_TARGETNAME}.app/Contents/Info.plist" property="osx.uptodate" />
    
        <sequential unless:set="osx.uptodate">
        
            <echo>Updating OS X resources...</echo>
            <copy.resources/>
    
            <!-- Update icons/artwork (only if newer) -->
            <copy todir="${APP_TARGETNAME}/frameworks/runtime-src/proj.ios_mac/mac" overwrite="true" >
                <fileset dir="${APP_FRAMEWORKS_DIR}/mac/res">
                    <include name="**/*.icns" />
                    <include name="**/*.png" />
                    <include name="**/*.jpg" />
                    <include name="**/*.gif" />
                </fileset>
            </copy>
        </sequential>
    </target>

    <target name="mac" description="Make OS X" depends="osx.configure" if="is.osx" unless="osx.uptodate">
        <macro-preprocess-release />
		<macro-cocos command="compile -p mac -m release" />
		<copy todir="${APP_DEPLOY_DIR}/${APP_TARGETNAME}.app"><fileset dir="${APP_TARGETNAME}/publish/mac/${APP_TARGETNAME} Mac.app"/></copy>
    </target>

    <target name="macdebug" description="Make Debug Mode OS X" depends="osx.configure" if="is.osx" >
        <macro-preprocess-debug />
		<macro-cocos command="compile -p mac -m debug" />
		<copy todir="${APP_DEPLOY_DIR}/${APP_TARGETNAME}.app"><fileset dir="${APP_TARGETNAME}/publish/mac/${APP_TARGETNAME} Mac.app"/></copy>
    </target>
    
    <target name="runmac" description="run OS X" depends="osx.configure" if="is.osx" >
        <macro-preprocess-release />
		<macro-cocos command="run -p mac -m release" />
		<copy todir="${APP_DEPLOY_DIR}/${APP_TARGETNAME}.app"><fileset dir="${APP_TARGETNAME}/publish/mac/${APP_TARGETNAME} Mac.app"/></copy>
    </target>

    <target name="debugmac" description="Debug OS X" depends="osx.configure" if="is.osx" >
        <macro-preprocess-debug />
		<macro-cocos command="run -p mac -m debug" />
    </target>

    <!-- Note: You need Linux to do Linux -->
    <target name="linux.configure" if="is.linux" >
        <echo>Updating Linux resources...</echo>
        <copy.resources/>

        <!-- Update Linux icons/artwork (only if newer) -->
        <mkdir dir="${APP_FRAMEWORKS_DIR}/linux/res" />
        <copy todir="${APP_TARGETNAME}/frameworks/runtime-src/proj.linux" >
            <fileset dir="${APP_FRAMEWORKS_DIR}/linux/res">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
		
    </target>

    <!-- Linux needs to be a Debian child -->
    <target name="linux" description="Make Linux" depends="linux.configure" if="is.linux" >
        <macro-preprocess-release />
		<macro-cocos command="compile -p linux -m release" />
    </target>

    <target name="linuxdebug" description="Make Debug Mode Linux" depends="linux.configure" if="is.linux" >
        <macro-preprocess-debug />
		<macro-cocos command="compile -p linux -m debug" />
    </target>
    
    <target name="runlinux" description="run Linux" depends="linux.configure" if="is.linux" >
        <macro-preprocess-release />
		<macro-cocos command="run -p linux -m release" />
    </target>
	
    <target name="debuglinux" description="Debug Linux" depends="linux.configure" if="is.linux" >
        <macro-preprocess-debug />
		<macro-cocos command="run -p linux -m debug" />
    </target>
    
    <!-- Note: You need Windows and Visual Studio to build a Windows target -->

    <target name="windows.configure" if="is.windows"  >
		<macro-uptodate targetfile="win32/Example.exe" property="windows.uptodate" />

        <sequential unless:set="windows.uptodate">
			<echo>Updating Windows resources...</echo>
            <copy.resources/>
			<copy file="${APP_FRAMEWORKS_DIR}/win32/res/game.ico" tofile="${APP_TARGETNAME}/frameworks/runtime-src/proj.win32/res/game.ico" overwrite="true" />
		</sequential>
    </target>

    <target name="win32" description="Make Windows" depends="windows.configure" if="is.windows" unless="windows.uptodate" >
        <macro-preprocess-release />
		<macro-cocos command="compile -p win32 -m release" />
		<copy todir="${APP_DEPLOY_DIR}/win32"><fileset dir="${APP_TARGETNAME}/publish/win32"/></copy>
    </target>

    <target name="win32debug" description="Make Debug Mode Windows" depends="windows.configure" if="is.windows" >
        <macro-preprocess-debug />
		<macro-cocos command="compile -p win32 -m debug" />
		<copy todir="${APP_DEPLOY_DIR}/win32"><fileset dir="${APP_TARGETNAME}/publish/win32"/></copy>
    </target>
    
    <target name="runwin32" description="run Windows" depends="windows.configure" if="is.windows" >
        <macro-preprocess-release />
		<macro-cocos command="run -p win32 -m release" />
		<copy todir="${APP_DEPLOY_DIR}/win32"><fileset dir="${APP_TARGETNAME}/publish/win32"/></copy>
    </target>
    
    <target name="debugwin32" description="Debug Windows" depends="windows.configure" if="is.windows" >
        <macro-preprocess-debug />
		<macro-cocos command="run -p win32 -m debug" />
    </target>

    <target name="win8.1.configure" if="is.windows" >
        <echo>Updating Win8.1 resources...</echo>
		
        <copy.resources/>
        <copy todir="${APP_FRAMEWORKS_DIR}/win8.1/res" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.win8.1-universal">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>

    </target>

    <target name="win8.1" description="Make Win8.1" depends="win8.1.configure" if="is.windows" >
        <macro-preprocess-release />
		<macro-cocos command="compile -p wp8_1 -m release" />
    </target>

    <target name="runwin8.1" description="run Windows" depends="win8.1.configure" if="is.windows" >
        <macro-preprocess-release />
		<macro-cocos command="run -p wp8_1 -m release" />
    </target>
    
    <target name="debugwin8.1" description="Debug Win8.1" depends="win8.1.configure" if="is.windows" >
        <macro-preprocess-debug />
		<macro-cocos command="run -p wp8_1 -m debug" />
    </target>
    
    <target name="wp8.configure" if="is.windows" >
        <echo>Updating Wp8 resources...</echo>
        <copy.resources/>
        <copy todir="${APP_FRAMEWORKS_DIR}/wp8/res" >
            <fileset dir="${APP_TARGETNAME}/frameworks/runtime-src/proj.wp8-xaml">
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.gif" />
            </fileset>
        </copy>
        
    </target>

    <target name="wp8" description="Make Wp8" depends="wp8.configure" if="is.windows" >
        <macro-preprocess-release />
		<macro-cocos command="compile -p wp8 -m release" />
    </target>

    <target name="runwp8" description="run Wp8" depends="wp8.configure" if="is.windows" >
        <macro-preprocess-release />
		<macro-cocos command="run -p wp8 -m release" />
    </target>
    
    <target name="debugwp8" description="Debug Wp8" depends="wp8.configure" if="is.windows" >
        <macro-preprocess-debug />
		<macro-cocos command="run -p wp8 -m debug" />
    </target>

   
    <!-- Hint: Remove unwanted projects from 'depends=' -->
    <target name="all" description="Make all release targets" depends="web,android,ios,mac,linux,win32" > <!--,win8.1,wp8-->
        
    </target>
    
</project>
