<?xml version="1.0" encoding="utf-8"?>
<!--
    A build script wrapping cocos?  Am I insane?  Yes... but that's not the point.
    
    The point is, where I observed behavior where Cocos2D-js *removed* the 
    contents of its src folder.  I don't like that.
    
    Also, keeping the res imports in resource.js straight, by hand, and editing 
    the project.json by hand, to keep adding source code was tedious.

    On top of that, I'd rather like to have the option to add/remove a few 'macro'
    definitions, to improvise some regular expression style code alterations, to
    add/remove code and defintions to/from different build flavors.  That's 
    almost certainly buried in cocos, somewhere, but the simplified interface
    hides it from me, and I don't want to go digging into the bottomless rabbit
    hole, modifying things, when I just want to write a game.
-->
<project basedir="." name="${targetname}" default="web" >

    <!-- 
        This allow you to override certain, private settings with your own folder  
        in ~/ant/build.properties.  Like passwords and device IDs.
    -->
	<property file="${user.home}/ant/build.properties"/>

	<!-- Import settings from environment -->
	<property environment="env" />

	<!-- Get paths from 'ant -f setup.xml' -->
    <property file="../configure.properties"/>
	
	<!-- Import build.properties, for project -->
	<property file="build.properties"/>

    <!-- Debugging...    
	<echoproperties/>
	-->
    
    <target name="initialize" description="Create Cocos2D-js Project" >
        <!-- Have cocos make the project -->
        
        <!-- Make corrections to the project -->

        <!-- Do initial transfer to project (the rest are incremental) -->

    </target>

    <!-- Invoke cocos in various prescribed manners -->
	<macrodef name="macro-cocos">
		<attribute name="command"/>		<!-- Command line for cocos -->
		<sequential>
			<tstamp />
			<exec executable="${SHELL}" failonerror="true" searchpath="true" >
			    <env key="ANT_ROOT" value="${ANT_ROOT}" />
			    <env key="COCOS_CONSOLE_ROOT" value="${COCOS_CONSOLE_ROOT}" />
			    <env key="COCOS_FRAMEWORKS" value="${COCOS_FRAMEWORKS}" />
			    <env key="ANDROID_SDK_ROOT" value="${ANDROID_SDK_ROOT}" />
			    <env key="NDK_ROOT" value="${NDK_ROOT}" />
			    <env key="PATH" value="${ANDROID_SDK_ROOT}:${COCOS_FRAMEWORKS}:${COCOS_CONSOLE_ROOT}:${env.PATH}"/>

                <arg line="${SHELL.c} 'cocos @{command}'" /> 

			    <!-- Filter stderr, to point back at OUR source paths... -->
            </exec>
        </sequential>
	</macrodef>

	<macrodef name="macro-transfer">
		<attribute name="debug"/>		<!-- Debug flag -->
		<attribute name="release"/>		<!-- Complimentary Release flag -->
		<attribute name="adware"/>		<!-- Enable adware -->
		<!-- etc. -->

	    <!-- Transfer icons -->
	    <sequential>
	    </sequential>

	    <!-- Transfer res -->
	    <sequential>
	    </sequential>

	    <!-- Transfer+translate source code, given those attributes -->
	    <sequential>
	    </sequential>

	    <!-- Generate resource references from resources in res -->
	    <sequential>
	    </sequential>

	    <!-- Generate resource code references from code in src -->
	    <sequential>
	    </sequential>
	    
	</macrodef>
    
    <target name="web" description="Make Web" depends="transfer" >
    </target>

    <target name="runweb" description="Run Web" depends="transfer" >
    </target>

    <target name="debugweb" description="Debug Web" depends="transfer" >
    </target>
    
    <target name="ios" description="Make iOS" depends="transfer" >
    </target>

    <target name="runios" description="Run iOS" depends="transfer" >
    </target>

    <target name="debugios" description="Debug iOS" depends="transfer" >
    </target>
    
    <target name="android" description="Make Android" depends="transfer" >
    </target>

    <target name="runandroid" description="Run Android" depends="transfer" >
    </target>

    <target name="debugandroid" description="Debug Android" depends="transfer" >
    </target>
    
    <target name="osx" description="Make OS X" depends="transfer" >
    </target>

    <target name="runosx" description="Run OS X" depends="transfer" >
    </target>

    <target name="debugosx" description="Debug OS X" depends="transfer" >
    </target>
    
    <target name="windows" description="Make Windows" depends="transfer" >
    </target>

    <target name="runwindows" description="Run Android" depends="transfer" >
    </target>
    
    <target name="debugwindows" description="Debug Windows" depends="transfer" >
    </target>

    <target name="linux" description="Make Linux" depends="transfer" >
    </target>

    <target name="runlinux" description="Run Linux" depends="transfer" >
    </target>
	
    <target name="debuglinux" description="Debug Linux" depends="transfer" >
    </target>

    <!-- Hint: Remove unwanted projects from 'depends=' -->
    <target name="all" description="Make all release targets" depends="web,android,ios,osx,windows,linux" >
    </target>
    
</project>